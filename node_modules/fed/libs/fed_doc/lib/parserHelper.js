
/*
	转换分析注释
	@author ijse
 */
var fs, getCommentStr, parser;

fs = require("fs");

exports.parse = function(fnDef, cmd) {
  var cmtStr, result;
  cmtStr = getCommentStr(fnDef);
  result = {
    name: parser.getTitle(cmtStr),
    leaf: true,
    params: parser.getParams(cmtStr),
    "return": parser.getReturn(cmtStr),
    meta: parser.getMeta(cmtStr),
    fnCmt: cmtStr,
    fnDef: fnDef,
    async: parser.getAsync(cmtStr),
    URI: parser.getURI(cmd),
    method: parser.getMethod(cmd)
  };
  return result;
};

parser = {
  getTitle: function(str) {
    var reg, _ref, _ref1;
    reg = /([^\r\n]*)[\r\n]/g;
    return (_ref = reg.exec(str)) != null ? (_ref1 = _ref[1]) != null ? _ref1.trim() : void 0 : void 0;
  },
  getDesc: function(str) {
    var reg, _ref, _ref1;
    reg = /[\r\n]([\s\S]*?)@/mgi;
    return (_ref = reg.exec(str)) != null ? (_ref1 = _ref[1]) != null ? _ref1.trim() : void 0 : void 0;
  },
  getURI: function(str) {
    var _ref;
    return (_ref = str.split(" ")) != null ? _ref[1] : void 0;
  },
  getMethod: function(str) {
    var _ref;
    return (_ref = str.split(" ")) != null ? _ref[0] : void 0;
  },
  getAuthor: function(str) {
    var reg, _ref, _ref1;
    reg = /@author\s(.*)/mgi;
    return (_ref = reg.exec(str)) != null ? (_ref1 = _ref[1]) != null ? _ref1.trim() : void 0 : void 0;
  },
  getParams: function(str) {
    var reg, res, result, _ref, _ref1;
    result = [];
    reg = /@param\s(.*?)\s([^@]*)(?=@|\*\/)/mgi;
    while (true) {
      res = reg.exec(str);
      if (res) {
        result.push({
          arg: (_ref = res[1]) != null ? _ref.trim() : void 0,
          desc: (_ref1 = res[2]) != null ? _ref1.trim() : void 0
        });
      }
      if (!res) {
        break;
      }
    }
    return result;
  },
  getReturn: function(str) {
    var reg, _ref, _ref1;
    reg = /@return\s(.*)(?=@|\*\/)/mgi;
    return (_ref = reg.exec(str)) != null ? (_ref1 = _ref[1]) != null ? _ref1.trim() : void 0 : void 0;
  },
  getAsync: function(str) {
    var reg;
    reg = /@async(?!\s*false)/mi;
    return reg.test(str);
  },
  getMeta: function(str) {
    var keyName, reg, res, result;
    result = {};
    reg = /@([^\s]*)\s(.*)\s([^@]*)(?=@|\*\/)/mgi;
    while (true) {
      res = reg.exec(str);
      if (res) {
        keyName = res[1];
        if (keyName === "param" || keyName === "return") {
          continue;
        }
        if (result[keyName] && result[keyName] instanceof Array) {
          result[keyName].push(res[2]);
        } else if (!result[keyName]) {
          result[keyName] = res[2];
        } else {
          result[keyName] = [result[keyName]];
          result[keyName].push(res[2]);
        }
        console.log(res);
        console.log("result:>>>>", result);
      }
      if (!res) {
        break;
      }
    }
    return result;
  }
};

getCommentStr = function(fctn) {
  var re, reg, result, _ref;
  reg = /\/\*\*([\s\S]*)\*\//gi;
  re = reg.exec(fctn);
  result = re != null ? (_ref = re[1]) != null ? _ref.replace(/^\s*\*?/mg, "") : void 0 : void 0;
  result = result != null ? result.trim() : void 0;
  return result;
};
