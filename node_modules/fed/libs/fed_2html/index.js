
/**
 * Export Html with template
 *
 * @author ijse
 */
;
var Config, doParse, parsePage, path, resolveConfig, util;

Config = require("./config.json");

util = require("./lib/util");

path = require("path");

exports.init = function(opts) {
  return this.on("commandinit", function(cmd) {
    return cmd.command('2html').option('-C, --config <configFile>', "the config file").description('exports html').action(function(cmd) {
      opts = resolveConfig(cmd.config);
      return doParse(opts);
    });
  });
};


/*
	Resolve views to file
	@param {object} opts the config object
	@param {function} cb the callback
 */

doParse = function(config, cb) {
  var tengine;
  tengine = require(config.engine);
  config.pages.every(function(page) {
    return parsePage;
  });
  if (typeof cb === "function") {
    cb();
  }
};

parsePage = function(page) {
  return util.mkdirParent(path.dirname(page.toFile), null, function() {
    var viewData;
    viewData = util.mergeData(config.global, page.data);
    viewData = util.mergeData({
      settings: {
        encoding: config.encoding,
        views: config.basePath
      }
    }, viewData);
    return tengine.renderFile(page.fromView, viewData, function(err, data) {
      if (err) {
        throw err;
      }
      return util.writeToFile(data, page.toFile, config.encoding);
    });
  });
};


/*
	@param {string} cfgFile the config filename
 */

resolveConfig = function(cfgFile) {
  var configFile, opts;
  configFile = util.realPath(cfgFile);
  opts = require(configFile);
  opts.basePath = util.realPath(opts.basePath);
  opts.savePath = util.realPath(opts.savePath);
  opts.pages.every(function(item) {
    item.toFile = util.joinPath(opts.savePath, item.toFile);
    return item.fromView = util.joinPath(opts.basePath, item.fromView);
  });
  return opts;
};

exports.doParse = doParse;

exports.resolveConfig = resolveConfig;
