
/*
	测试FTL模板引擎功能

	说明：
		1. 为避免字符编码问题，对返回的断言内容不包含中文字符
		2. FTL渲染由于是调用JAR包执行，因此效率稍低些

	@author: ijse
 */
var assert, ftlEngine, path, spawn, thisPath, viewPath;

ftlEngine = require("../index.js");

assert = require("assert");

path = require("path");

thisPath = __dirname + "/res";

viewPath = path.join(thisPath, "views");

spawn = require('child_process').spawn;

describe("ftl.jar 模板处理功能测试：", function() {
  var ftlRender;
  ftlRender = function(tpl, data, fn) {
    data["settings"] = {
      views: viewPath,
      fileEncoding: "utf-8"
    };
    return ftlEngine.renderFile(path.join(viewPath, "" + tpl + ".ftl"), data, fn);
  };
  it("处理简单模板（只有变量）,成功注入变量到页面", function(done) {
    var dataModel;
    dataModel = {
      title: "Test Suit1: 简单变量处理",
      person: {
        name: "Oka John",
        age: 20,
        email: "oka@test.com"
      }
    };
    return ftlRender("variables", dataModel, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("<title>Test Suit1:"), -1);
      assert.notEqual(data.indexOf("<td>Oka John</td>"), -1);
      return done();
    });
  });
  it("处理含有宏文件的模板，成功执行宏定义", function(done) {
    var dataModel;
    dataModel = {
      title: "Test Suit2: 含有宏定义的页面",
      message: "Hello world!"
    };
    return ftlRender("withInMacros", dataModel, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("<b>Message: Hello world!</b>"), -1);
      return done();
    });
  });
  it("处理宏定义在其它文件中的宏模板", function(done) {
    var dataModel;
    dataModel = {
      title: "Test Suit3: 宏定义在另一个文件中",
      message: "Hello world!"
    };
    return ftlRender("includeMacros", dataModel, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("<b>Message: Hello world!</b>"), -1);
      return done();
    });
  });
  it("处理include某个目录下的文件模板", function(done) {
    var dataModel;
    dataModel = {
      title: "Test Suit4: 包含另一个目录下的文件内容"
    };
    return ftlRender("includeFile", dataModel, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("I'm included file"), -1);
      return done();
    });
  });
  it("处理Sequence类型数据", function(done) {
    var dataModel;
    dataModel = {
      title: "Test Suit5: 这页有一个列表",
      shopList: ["beef", "water", "noodles", "egg"]
    };
    return ftlRender("shopList", dataModel, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("<li>beef</li>"), -1);
      assert.notEqual(data.indexOf("<li>water</li>"), -1);
      assert.notEqual(data.indexOf("<li>egg</li>"), -1);
      return done();
    });
  });
  return it("处理含有继承的模板", function(done) {
    return ftlRender("child", {}, function(err, data) {
      if (err) {
        done(err);
      }
      assert.notEqual(data.indexOf("<title>newTitle"), -1);
      assert.notEqual(data.indexOf("<h3>newBody"), -1);
      return done();
    });
  });
});
