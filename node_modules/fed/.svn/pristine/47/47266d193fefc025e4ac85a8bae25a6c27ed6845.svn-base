
/*
	Make data object

	@author ijse
 */
var fs, getDataList, getDataObj, parser, path, processFile;

fs = require("fs");

path = require("path");

parser = require("./parserHelper");

getDataList = function(tpath, basePath) {
  var f, file, list, packageName, result, _i, _len;
  result = [];
  if (!basePath) {
    packageName = path.basename(basePath);
  } else {
    packageName = tpath.replace(basePath, "");
  }
  list = fs.readdirSync(tpath);
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    f = list[_i];
    file = path.join(tpath, f);
    if (fs.lstatSync(file).isDirectory()) {
      result.push({
        "package": packageName
      });
    }
  }
};

getDataObj = function(tpath) {
  var f, file, list, result, routeList, tpackage, _i, _len;
  result = [];
  tpackage = path.basename(tpath);
  list = fs.readdirSync(tpath);
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    f = list[_i];
    file = path.join(tpath, f);
    if (fs.lstatSync(file).isDirectory()) {
      result.push({
        "name": tpackage,
        "leaf": false,
        "children": getDataObj(file)
      });
    } else {
      routeList = processFile(file, tpackage, f);
      if (routeList.length > 0) {
        result.push({
          "name": tpackage,
          "leaf": false,
          "class": f,
          "file": file,
          "children": routeList
        });
      }
    }
  }
  return result;
};

processFile = function(file, tpackage, f) {
  var fnDef, result, route, routeFn, routes, tobj;
  result = [];
  routes = require(file);
  for (route in routes) {
    routeFn = routes[route];
    if (!routeFn) {
      continue;
    }
    fnDef = routeFn.toString();
    tobj = parser.parse(fnDef, route);
    tobj["class"] = "" + tpackage + "/" + f;
    result.push(tobj);
  }
  return result;
};

exports.getDataObj = getDataObj;
