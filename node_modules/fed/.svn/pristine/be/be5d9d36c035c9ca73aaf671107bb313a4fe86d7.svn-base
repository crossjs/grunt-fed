
/**
 * Export Html with template
 *
 * @author ijse
 */
;
var fedUtil, fs, path;

fedUtil = require("../../utils");

path = require("path");

fs = require("fs");

exports.exec = function(args, cmdConfig) {
  var config, configFile, endTime, excludeFile, startTime, tplEngine;
  if (!args.configFile) {
    console.error("Need Config file!");
    return;
  }
  console.log("\nRead and parse config file");
  configFile = fedUtil.realPath(process.cwd(), args.configFile);
  config = require(configFile);
  config.viewPath = fedUtil.realPath(path.dirname(configFile), config.viewPath);
  config.destPath = fedUtil.realPath(path.dirname(configFile), config.destPath);
  config.mockPath = fedUtil.realPath(path.dirname(configFile), config.mockPath);
  tplEngine = require(config.engine);
  console.log("Start parsing...\n==========================\n");
  startTime = Date.now();
  excludeFile = /^(\.|_)/;
  fedUtil.traverseFolderSync(config.mockPath, excludeFile, function(err, file) {
    var mocks;
    mocks = require(file);
    console.log("Load mock: " + file);
    if (!mocks instanceof Array) {
      mocks = [mocks];
    }
    mocks.forEach(function(mock, n) {
      var template, toFile, viewData;
      template = path.join(config.viewPath, mock.template);
      toFile = path.join(config.destPath, mock.toFile);
      viewData = fedUtil.extend(config.globals, mock.data, {
        settings: {
          template: template,
          toFile: toFile,
          encoding: config.encoding,
          views: config.viewPath
        }
      });
      fedUtil.mkdirSync(path.dirname(toFile));
      return tplEngine.renderFile(template, viewData, function(err, data) {
        if (err) {
          throw err;
        }
        fs.writeFileSync(toFile, data, config.encoding);
        return console.log("- done " + (n + 1) + " of " + mocks.length);
      });
    });
  });
  endTime = Date.now();
  return console.log("\n=======================\nfedHtml: All done within " + ((endTime - startTime) / 1000) + "s!");
};
